use crate::token::Token;

/// An Expr is the type of expression to evaluate (ExprType) that stores the token(s) associated
/// with the expression.
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct Expr {
    pub ty: ExprType,
    pub tokens: Vec<Token>,
}

/// An ExprType is an expression / representation of the brainfuck code generated by the parser. An
/// ExprType is either a basic instruction (Set, Add, Sub, MoveRight, MoveLeft) with a u32
/// describing the amount of times to repeat the action, or a LoopBlock containing the LoopBlock to
/// evaluate.
#[derive(Debug, Clone, PartialEq, Eq)]
pub enum ExprType {
    /// Set the current cell to the u32 value
    Set(u32),
    /// Add the u32 value to the current cell
    Add(u32),
    /// Subtract the u32 value from the current cell
    Sub(u32),
    /// Move right from the current cell the u32 value times
    MoveRight(u32),
    /// Move left from the current cell the u32 value times
    MoveLeft(u32),
    /// Output the value of the current cell u32 value times
    Output(u32),
    /// Take input into the current cell u32 value times
    Input(u32),
    /// Execute the expressions contained in the LoopBlock until the pointer's cell is zero
    LoopBlock(Box<LoopBlock>),
}

/// A LoopBlock is a container for the tokens contained within IfZero and IfNonZero brackets. They
/// can contain other LoopBlocks.
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct LoopBlock {
    pub exprs: Vec<Expr>,
}
